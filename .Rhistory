mutate(op = case_when(op == "+" ~ "--",
op == "/" ~ "match",
T ~ op) %>%
factor(levels = c("match", ",", ".", "?", "--", "del", "tr"))) %>%
mutate(punct = case_when(punct == "+" ~ "--", T  ~ punct)%>% factor(levels = c("/", ",", ".", "?", "--")))
ggplot(ops_summ_2, aes(fill = op, x = punct, y =perc)) +  xlab ("Percentage") + ylab("Endnote") + geom_bar(stat="identity", position = "dodge")
ggplot(ops_summ_2 %>%
mutate(punct = case_when(punct == "," ~ "Continuing (,)",
punct == "." ~ "Falling (.)",
punct == "?" ~ "Appeal (?)",
punct == "--" ~ "Truncation (--)")), aes(x = op, y =perc)) +  xlab ("Endnote") + ylab("Percentage") + geom_bar(stat="identity") + facet_wrap(vars(punct), ncol = 2)
scores = rbind(t09, t16, t25,  t49)
scores = rbind(t09, t16, t25,  t49)
colnames(scores) = c("S^I", "S_B^I", "S^M", "S_B^M")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("S^I", "S_B^I", "S^M", "S_B^M"))
scores
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("S^I", "S_B^I", "S^M", "S_B^M"))
scores %>% data.frame %>% rownames_to_column(var = "text")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM"))
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM"))
scores
scores = rbind(t09, t16, t25,  t49)
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(names = factor(names, levels = c("SI", "SBI", "SM", "SBM")))
scores = rbind(t09, t16, t25,  t49)
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(names = factor(names, levels = c("SI", "SBI", "SM", "SBM")))
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(names = factor(names, levels = c("SI", "SBI", "SM", "SBM")))
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(names = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(name = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = rbind(t09, t16, t25,  t49)
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(name = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
scores
?theme
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + theme(legend.key = c("S^I", "S_B^I", "S^M", "S_B^M"))
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + theme(legend.text = c("S^I", "S_B^I", "S^M", "S_B^M"))
?scale_group_discrete
?scale_color_discrete
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"))
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M")) + scale_group_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"))
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M")) + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"))
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M")) + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), title = "Ho")
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M")) + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure")
install.packages("tikzDevice")
?tikz
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
colnames(scores) = c("SI", "SBI", "SM", "SBM")
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
library(tikz)
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
scores = rbind(t09, t16, t25,  t49)
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(name = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
scores = rbind(t09, t16, t25,  t49)
scores = rbind(t09, t16, t25,  t49)
colnames(scores) = c("SI", "SBI", "SM", "SBM")
scores = scores %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(name = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
dev.off()
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
t09_iaa = c(t09_iaa_i, t09_iaa_m)
t16_iaa = c(t16_iaa_i, t16_iaa_m)
t25_iaa = c(t25_iaa_i, t25_iaa_m)
t49_iaa = c(t49_iaa_i, t49_iaa_m)
iaas = rbind(t09_iaa, t16_iaa, t25_iaa,  t49_iaa)
colnames(iaas) = c("SI", "SBI", "SM", "SBM")
iaas = iaas %>% data.frame %>% rownames_to_column(var = "text") %>%
pivot_longer(cols = c("SI", "SBI", "SM", "SBM")) %>%
mutate(name = factor(name, levels = c("SI", "SBI", "SM", "SBM")))
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Cohen's \kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
t09_iaa
t16_iaa
t25_iaa
t49_iaa
t09
t16
t25
t49
tsim_N
tsim_N
data1 = nccu_t009
data1 = nccu_t009[[1]]
data2 = nccu_t009[[2]]
record = FALSE
m = NA
transCost=0.5
boundaries = c(",", ".", "?", "-", "+")
noboundary = ";"
trans = TRUE
K = 100
asim=sim_Score(data1,data2, m = m, boundaries = boundaries, noboundary = noboundary, transCost = transCost, trans  = trans, record = F)#check similarity score of two data input
#Remove all double spaces
d1 = data1 %>% mutate(Utterance = str_replace_all(Utterance, " +", " "))
d2 = data2 %>% mutate(Utterance = str_replace_all(Utterance, " +", " "))
if (any(is.na(m))){
m=diag(length(boundaries)+2) # no endnote and no boundry
}
d1=reNA(d1) %>% reDS
se1=sepSpeaker(d1)
#bdlist1=genBd(d1,se1,boundaries,noboundary)
bd1=genBdV2(d1,boundaries,noboundary)
d2=reNA(d2) %>% reDS
se2=sepSpeaker(d2)
#bdlist2=genBd(d2,se2,boundaries,noboundary)
bd2=genBdV2(d2,boundaries,noboundary)
#calCost1V2(bd1, bd2, m, order, transCost)
order = c(boundaries,noboundary,' ')
# deal with transcost
transCost=expandTrans(transCost,order)
# for inter-annotated agreement
data1Num = bdNum(bd1)  # calculate the number of boundries for a file
data2Num = bdNum(bd2)  # calculate the number of boundries for a file
data1Puncnum = puncNum(bd1, order)#number of punctuation in each kind
data1Number = sum(data1Puncnum) #get total number of punctuation
data1Place = gePlace(data1Num, data1Number)#num is total number of boundry, number is number of punctuation
data2Puncnum = puncNum(bd2, order)
data2Number = sum(data2Puncnum) #get total number of
data2Place = gePlace(data2Num, data2Number)#num is total number of boundry, number is number of punctuation
#main function
tsim_N = numeric(K)
tsim_B = numeric(K)
bdNumber=bdNumV2(bd1)
K = 2
for (i in seq(1,K)){
message(paste0("Doing iteration ", i))
dataPunc1 = speaker_num(bd1,data1Place,data1Number,data1Puncnum,data1Num,order)
dataPunc2 = speaker_num(bd2,data2Place,data2Number,data2Puncnum,data2Num,order)
cost = suppressMessages(calCost1V2(dataPunc1,dataPunc2, m, order, transCost))#If only need to use calculate cost without using simularity score, use calCost1
sim_N =simScore(bdNumber,cost[1])
sim_B =simScore(cost[2],cost[1])
tsim_N[i] = sim_N
tsim_B[i] = sim_B
}
tsim_N
tsim_B
cost
sim_B
tsim_B
asim
tsim_avg
tsim_avg =c(mean(tsim_N),mean(tsim_B))
tsim_avg
tsim_N
tsim_B
cost[2]
cost[1]
bdNumber
sim_N
bdNumber
asim
cost[2]
cost[1]
asim_full=sim_Score(data1,data2, m = m, boundaries = boundaries, noboundary = noboundary, transCost = transCost, trans  = trans, record = T)#check similarity score of two data input
asim_full
cost[2]
transCost = transCost
m = M_nccu
boundaries = bounds_nccu
asim=sim_Score(data1,data2, m = m, boundaries = boundaries, noboundary = noboundary, transCost = transCost, trans  = trans, record = F)#check similarity score of two data input
#Remove all double spaces
d1 = data1 %>% mutate(Utterance = str_replace_all(Utterance, " +", " "))
d2 = data2 %>% mutate(Utterance = str_replace_all(Utterance, " +", " "))
if (any(is.na(m))){
m=diag(length(boundaries)+2) # no endnote and no boundry
}
d1=reNA(d1) %>% reDS
se1=sepSpeaker(d1)
#bdlist1=genBd(d1,se1,boundaries,noboundary)
bd1=genBdV2(d1,boundaries,noboundary)
d2=reNA(d2) %>% reDS
se2=sepSpeaker(d2)
#bdlist2=genBd(d2,se2,boundaries,noboundary)
bd2=genBdV2(d2,boundaries,noboundary)
#calCost1V2(bd1, bd2, m, order, transCost)
order = c(boundaries,noboundary,' ')
# deal with transcost
transCost=expandTrans(transCost,order)
# for inter-annotated agreement
data1Num = bdNum(bd1)  # calculate the number of boundries for a file
data2Num = bdNum(bd2)  # calculate the number of boundries for a file
data1Puncnum = puncNum(bd1, order)#number of punctuation in each kind
data1Number = sum(data1Puncnum) #get total number of punctuation
data1Place = gePlace(data1Num, data1Number)#num is total number of boundry, number is number of punctuation
data2Puncnum = puncNum(bd2, order)
data2Number = sum(data2Puncnum) #get total number of
data2Place = gePlace(data2Num, data2Number)#num is total number of boundry, number is number of punctuation
#main function
tsim_N = numeric(K)
tsim_B = numeric(K)
bdNumber=bdNumV2(bd1)
for (i in seq(1,K)){
message(paste0("Doing iteration ", i))
dataPunc1 = speaker_num(bd1,data1Place,data1Number,data1Puncnum,data1Num,order)
dataPunc2 = speaker_num(bd2,data2Place,data2Number,data2Puncnum,data2Num,order)
cost = suppressMessages(calCost1V2(dataPunc1,dataPunc2, m, order, transCost))#If only need to use calculate cost without using simularity score, use calCost1
sim_N =simScore(bdNumber,cost[1])
sim_B =simScore(cost[2],cost[1])
tsim_N[i] = sim_N
tsim_B[i] = sim_B
}
tsim_avg =c(mean(tsim_N),mean(tsim_B))
Iaa=c((asim-tsim_avg)/(1-tsim_avg))#calculate IAA
cost
cost
asim_full
m
tsim_N
tsim_B
tsim_B
asim_full
ggplot(ops_summ_2 %>%
mutate(punct = case_when(punct == "," ~ "Continuing (,)",
punct == "." ~ "Falling (.)",
punct == "?" ~ "Appeal (?)",
punct == "--" ~ "Truncation (--)")), aes(x = op, y =perc)) +  xlab ("Endnote") + ylab("Percentage") + geom_bar(stat="identity") + facet_wrap(vars(punct), ncol = 2)
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\_f\(I\)", "S\_f\^B\(I\)", "S\_f\(M\)", "S\_f\^B\(M\)"), name = "measure") + scale_shape_discrete(labels = c("S\_f\(I\)", "S\_f\^B\(I\)", "S\_f\(M\)", "S\_f\^B\(M\)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\_f\(I\)", "S\_f\^B\(I\)", "S\_f\(M\)", "S\_f\^B\(M\)"), name = "measure") + scale_shape_discrete(labels = c("S\_f\(I\)", "S\_f\^B\(I\)", "S\_f\(M\)", "S\_f\^B\(M\)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S_f\(I\)", "S_f\^B\(I\)", "S_f\(M\)", "S_f\^B\(M\)"), name = "measure") + scale_shape_discrete(labels = c("S_f\(I\)", "S_f\^B\(I\)", "S_f\(M\)", "S_f\^B\(M\)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S_f(I)", "S_f\^B(I)", "S_f(M)", "S_f\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S_f(I)", "S_f\^B(I)", "S_f(M)", "S_f\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S_f(I)", "S_f^B(I)", "S_f(M)", "S_f^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S_f(I)", "S_f^B(I)", "S_f(M)", "S_f^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S_f^B(I)", "S_f(M)", "S_f^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S_f^B(I)", "S_f(M)", "S_f^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("\\kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa")
dev.off()
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa")
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(c("t09", "t16", "t25","t49"))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(c("t09", "t16", "t25","t49"))
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(c("t09", "t16", "t25","t49"))
dev.off()
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(c("t09", "t16", "t25","t49"))
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
dev.off()
sim_B
sim_N
tsim_B
cost
cost
asim
asim_full
cost
cost
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + scale_shape_discrete(labels = c("S^I", "S_B^I", "S^M", "S_B^M"), name = "measure") + xlab("Text") + ylab("Similarity metric")
getwd()
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + scale_shape_discrete(labels = c("S\\_f(I)", "S\\_f\\^B(I)", "S\\_f(M)", "S\\_f\\^B(M)"), name = "measure") + xlab("Text") + ylab("Cohen's \\\\kappa") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
dev.off()
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_shape_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + xlab("Text") + ylab("Cohen's $\kappa$") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
tikzDevice::tikz(file = "./example_plot_2.tex", width = 3.5, height = 2)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_shape_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + xlab("Text") + ylab("Cohen's $\\kappa$") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
dev.off()
tikzDevice::tikz(file = "./scores.tex", width = 3.5, height = 2)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point()  + scale_color_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_shape_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_x_discrete(labels = c("t09", "t16", "t25","t49")) + xlab("Text") + ylab("Similarity metric")
dev.off()
tikzDevice::tikz(file = "./iaa.tex", width = 3.5, height = 1.5)
ggplot(iaas, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line() + scale_color_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_shape_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + xlab("Text") + ylab("Cohen's $\\kappa$") + scale_x_discrete(labels = c("t09", "t16", "t25","t49"))
dev.off()
tikzDevice::tikz(file = "./scores.tex", width = 3.5, height = 1.5)
ggplot(scores, aes(x = text, y = value, col = name, group = name, shape = name)) + geom_point() + geom_line()  + scale_color_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_shape_discrete(labels = c("$S_f(I)$", "$S_f^B(I)$", "$S_f(M)$", "$S_f^B(M)$"), name = "measure") + scale_x_discrete(labels = c("t09", "t16", "t25","t49")) + xlab("Text") + ylab("Similarity metric")
dev.off()
save.image("~/GitHub/taiwan-mandarin-corpus-annotation/20220129_iaa.RData")
use_data(nccu_t009)
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Lu.rez")
library(devtools)
load_all()
library(tidyverse)
library(compare)
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Lu.rez")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Ryan.rez")
sim_Score(anno1, anno2)
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
stripPunct = function(data, punct = c("\\?", "\\.", "--", ",")){
punct_regex = paste0(" (", paste0(punct, collapse = "|"), ")")
data %>% mutate(Utterance = str_strip_last(Utterance, punct_regex))
}
anno1 = read_csv("C:/Users/User/Documents/GitHub/taiwan-mandarin-corpus-annotation/8_manual_split/NCCU-TM036-CN-FF_Sabrina.csv")
anno2 = read_csv("C:/Users/User/Documents/GitHub/taiwan-mandarin-corpus-annotation/8_manual_split/NCCU-TM036-CN-FF_Yujie Li.csv")
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno1p = stripPunct(anno1)
str_strip_last = function(strings, regex){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) substring(strings[i], 1, curr_locs[nrow(curr_locs), 1] - 1)
else strings[i]
})
}
str_extract_last = function(strings, regex){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) substring(strings[i], curr_locs[nrow(curr_locs), 1], curr_locs[nrow(curr_locs), 2])
else NA
})
}
str_extract_first = function(strings, regex){
contains = str_starts(strings, regex)
locs = str_locate(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[i,]
if(contains[i]) substring(strings[i], curr_locs[1], curr_locs[2]) else NA
})
}
str_replace_last = function(strings, regex, replacement){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) paste0(substring(strings[i], 1, curr_locs[nrow(curr_locs), 1] - 1), replacement)
else NA
})
}
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
View(anno1)
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Lu.rez")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Ryan.rez")
sim_Score(anno1. anno2)
sim_Score(anno1, anno2)
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Ryan.rez")
sim_Score(anno1, anno2)
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
nccu_t001
t01_i = sim_Score(nccu_t001[[1]], nccu_t001[[2]])
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
t01_i = sim_Score(nccu_t001[[1]], nccu_t001[[2]])
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
nccu_t001 = anno1
nccu_t002 = anno2
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
nccu_t001 = list(anno1, anno2)
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
M_nccu = matrix(
c(1, .5, .25, .25, 1, 0,
.5, 1, .5, .5, 1, .25,
.25, .5, 1, .25, 1, 0,
.25, .5, .25, 1, 1, .25,
1,1,1,1,1, 1,
0, .25, 0, .25, 1, 1),
nrow = 6)
bounds_nccu = c(",", ".", "?", "+")
transCost = (1-M_nccu[,6])*.5
t01_m = sim_Score(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
t01_i = sim_Score(nccu_t001[[1]], nccu_t001[[2]])
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Sabrina.rez")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM001-CN-FM_Ryan.rez")
str_strip_last = function(strings, regex){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) substring(strings[i], 1, curr_locs[nrow(curr_locs), 1] - 1)
else strings[i]
})
}
str_extract_last = function(strings, regex){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) substring(strings[i], curr_locs[nrow(curr_locs), 1], curr_locs[nrow(curr_locs), 2])
else NA
})
}
str_extract_first = function(strings, regex){
contains = str_starts(strings, regex)
locs = str_locate(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[i,]
if(contains[i]) substring(strings[i], curr_locs[1], curr_locs[2]) else NA
})
}
str_replace_last = function(strings, regex, replacement){
contains = str_ends(strings, regex)
locs = str_locate_all(strings, regex)
sapply(1:length(strings), function(i){
curr_locs = locs[[i]]
if(nrow(curr_locs) > 0 & contains[i]) paste0(substring(strings[i], 1, curr_locs[nrow(curr_locs), 1] - 1), replacement)
else NA
})
}
stripPunct = function(data, punct = c("\\?", "\\.", "--", ",")){
punct_regex = paste0(" (", paste0(punct, collapse = "|"), ")")
data %>% mutate(Utterance = str_strip_last(Utterance, punct_regex))
}
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
sim_Score(anno1, anno2)
View(anno1)
View(anno2)
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
sim_Score(anno1, anno2)
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Sabrina.rez")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
sim_Score(anno1, anno2)
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
anno1 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Sabrina.rez")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
sim_Score(anno1, anno2)
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
sim_Score(anno1, anno2)
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
anno2 = rezTrans("C:\\Users\\User\\Documents\\GitHub\\taiwan-mandarin-corpus-annotation\\8_manual_split\\NCCU-TM036-CN-FF_Yujie.rez")
anno1$Utterance = anno1$Utterance %>% str_replace_all("—", "--")
anno2$Utterance = anno2$Utterance %>% str_replace_all("—", "--")
anno1p = stripPunct(anno1)
anno2p = stripPunct(anno2)
write_csv(anno1p %>% mutate(Utterance = unlist(Utterance)), "anno1.csv")
write_csv(anno2p%>% mutate(Utterance = unlist(Utterance)), "anno2.csv")
write_csv(anno1p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno1col.csv")
write_csv(anno2p %>% group_by(Speaker) %>% summarise(Utt = paste0(Utterance, collapse = " ")) %>% select(Utt), "anno2col.csv")
sim_Score(anno1, anno2)
nccu_t036 = list(anno1, anno2)
t36_m = sim_Score(nccu_t036[[1]], nccu_t036[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
t01_i = sim_Score(nccu_t001[[1]], nccu_t001[[2]])
t36_i = sim_Score(nccu_t036[[1]], nccu_t036[[2]])
t36_iaa_m = IAA(nccu_t036[[1]], nccu_t036[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
t36_iaa_i = IAA(nccu_t036[[1]], nccu_t036[[2]])
t01_iaa_m = IAA(nccu_t001[[1]], nccu_t001[[2]], transCost = transCost, m = M_nccu, boundaries = bounds_nccu)
t01_iaa_i = IAA(nccu_t001[[1]], nccu_t001[[2]])
t36_iaa_i = IAA(nccu_t036[[1]], nccu_t036[[2]])
load("~/GitHub/taiwan-mandarin-corpus-annotation/20220129_iaa.RData")
save.image("~/GitHub/segsimflex/20230206.RData")
